rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return isAnyAuthenticated() && userId == request.auth.uid;
    }

    function isNotUpdating(fieldName) {
      return !(fieldName in request.resource.data) 
        || request.resource.data[fieldName] == resource.data[fieldName];
    }

    function isValidUser(user) {
      return user.size() == 2 
        && 'id' in user && user.id is string
        && 'email' in user && user.email is string;
    }

    function isValidScoreWithCV(score) {
      return score.size() == 5 
      	|| score.size() == 6
        && 'components' in score && score.components is list
        && 'cv' in score && score.cv is number
        && 'isFavorite' in score  && score.isFavorite is bool
        && 'scoreId' in score && score.scoreId is string 
        && 'total' in score && score.total is number;
    }

    function isValidScore(score) {
      return score.size() == 4 
      	|| score.size() == 5
        && 'components' in score && score.components is list
        && 'isFavorite' in score && score.isFavorite is bool 
        && 'scoreId' in score && score.scoreId is string 
        && 'total' in score && score.total is number;
    }

    function isValidVTScore(vtScore) {
      return vtScore.size() == 3 ||  vtScore.size() == 2
        && 'scoreId' in vtScore && vtScore.scoreId is string
        && 'techName' in vtScore && vtScore.techName is string
        && vtScore.score is number || vtScore.score is null;
    }

    match /users/{userId} {
      allow read: if isAnyAuthenticated();
      allow create: if isUserAuthenticated(userId) && isValidUser(request.resource.data);
      allow update: if isUserAuthenticated(userId) && isNotUpdating('id');
      allow delete: if isUserAuthenticated(userId);

      match /fx/{fxSscoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidScoreWithCV(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId);
      }

      match /tokens/{token} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId);
        allow update: if isUserAuthenticated(userId);
        allow delete: if isUserAuthenticated(userId);
      }

      match /ph/{phScoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidScore(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId); 
      }

      match /sr/{srScoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidScore(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId); 
      }

      match /vt/{vtScoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidVTScore(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId); 
      }

      match /pb/{pbScoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidScore(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId);  
      }

      match /hb/{hbScoreId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidScoreWithCV(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isNotUpdating('scoreId');
        allow delete: if isUserAuthenticated(userId);  
      }

    }
  }
}